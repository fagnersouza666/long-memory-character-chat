// schema.prisma
generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  role          String   @default("employee")
  department    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?
  
  // Relacionamentos
  organizations OrganizationUser[]
  workspaces    WorkspaceUser[]
  documents     Document[]
  employeeEvaluations   Evaluation[] @relation("EmployeeEvaluations")
  evaluatorEvaluations  Evaluation[] @relation("EvaluatorEvaluations")
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  users     OrganizationUser[]
  workspaces Workspace[]
}

model OrganizationUser {
  userId         Int
  organizationId Int
  role           String @default("member")
  
  user         User @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  
  @@id([userId, organizationId])
}

model Workspace {
  id             Int      @id @default(autoincrement())
  name           String
  organizationId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relacionamentos
  organization Organization @relation(fields: [organizationId], references: [id])
  users        WorkspaceUser[]
  documents    Document[]
}

model WorkspaceUser {
  userId      Int
  workspaceId Int
  role        String @default("member")
  
  user      User @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  
  @@id([userId, workspaceId])
}

model Document {
  id          Int      @id @default(autoincrement())
  title       String
  filePath    String
  fileType    String
  size        Int?
  authorId    Int
  workspaceId Int
  uploadDate  DateTime @default(now())
  status      String   @default("active")
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  author    User @relation(fields: [authorId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  chunks    DocumentChunk[]
}

model DocumentChunk {
  id         Int      @id @default(autoincrement())
  documentId Int
  content    String
  embedding  Unsupported("vector")?   // Vetor armazenado como pgvector
  createdAt  DateTime @default(now())
  
  // Relacionamentos
  document Document @relation(fields: [documentId], references: [id])
}

model Evaluation {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  evaluatorId Int?
  period      String
  content     String
  score       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  employee  User @relation("EmployeeEvaluations", fields: [employeeId], references: [id])
  evaluator User? @relation("EvaluatorEvaluations", fields: [evaluatorId], references: [id])
}

model Model {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  displayName String
  prompt      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
